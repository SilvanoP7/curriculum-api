// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/db": {
            "get": {
                "description": "Responds with fail or connected status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DbTest"
                ],
                "summary": "Basic health check to ensure the service can connect to the db",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DbTest"
                        }
                    }
                }
            }
        },
        "/getSubjectContent": {
            "get": {
                "description": "Responds with the all subject contents",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "getSubjectContent"
                ],
                "summary": "Get Subject Contents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SubjectContent"
                        }
                    }
                }
            }
        },
        "/getSubjects": {
            "get": {
                "description": "Responds with pong status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "getSubjects"
                ],
                "summary": "Basic health check to ensure service is responding",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Subjects"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Responds with pong status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Basic health check to ensure service is responding",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Pong"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.DbTest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Pong": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "models.SubjectContent": {
            "type": "object",
            "properties": {
                "subjectContent": {
                    "type": "string"
                },
                "subjectContentId": {
                    "type": "string"
                },
                "subjectId": {
                    "type": "string"
                }
            }
        },
        "models.Subjects": {
            "type": "object",
            "properties": {
                "keyStage": {
                    "type": "integer"
                },
                "purposeOfStudy": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "subjectId": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "curriculum-api",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
